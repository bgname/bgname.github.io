I"DU<h1 id="一id缓存器">一、id缓存器</h1>

<h3 id="1整体流程">1、整体流程</h3>

<ul>
  <li>
    <p>核心<strong>setIdCacheMap</strong>方法注入所有的<strong>IdCache</strong>实现类，统一放入一个容器中</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIdCacheMap</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">IdCache</span><span class="o">&gt;</span> <span class="n">idCaches</span><span class="o">)</span> <span class="o">{}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>replaceAttributeValue</strong>将缓存中对应的属性值进行注入：</p>

    <ul>
      <li>
        <p><strong>replaceEmptyFields</strong>将Model中为null的属性字段替换为相应的Id</p>
      </li>
      <li>
        <p>通过Id列表为key先从Redis里面取缓存，<strong>redisTemplate.opsForValue().multiGet(idSet)</strong></p>
      </li>
      <li>
        <p>如果缓存不存在，<strong>cacheAttributeValue</strong>方法调用相应类型的<strong>IdCache</strong>的<strong>getAttributesByIds</strong></p>

        <p>查询到相应的值，然后设置到缓存中<strong>redisTemplate.opsForValue().multiSet(allAttributes)</strong></p>
      </li>
      <li>
        <p>进行正则匹配，将为空的属性替换成缓存中对应的值</p>
      </li>
    </ul>
  </li>
  <li>
    <p>采用@ThService+Aop统一增强接口，处理返回的VO（<strong>@AfterReturning</strong>）,将VO中为空的属性填充相应缓存中的值</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="nc">IdCacheHelper</span><span class="o">.</span><span class="na">replaceAttributeValue</span><span class="o">(</span><span class="nc">JsonUtil</span><span class="o">.</span><span class="na">toJSONStringWithNull</span><span class="o">(</span><span class="n">result</span><span class="o">)),</span> <span class="nc">PageResponse</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2使用方法及使用示例">2、使用方法及使用示例</h3>

<ul>
  <li>在Service实现类上添加@ThService</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ThService</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestThServiceImpl</span> <span class="o">{}</span>
</code></pre></div></div>

<ul>
  <li>在接口返回的VO中，添加缓存Model中的属性字段以获取缓存</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">缓存Model</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserIdCacheInfo</span> <span class="o">{</span>

    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">;</span>

    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户名"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"手机号"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserInfoVO</span> <span class="o">{</span>
    
    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">;</span>

    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户名"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"手机号"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 注意！！：一定要设置相应的Id，上述就是userId</span>
<span class="k">new</span> <span class="nf">UserInfoVO</span><span class="o">().</span><span class="na">setUserId</span><span class="o">(</span><span class="s">"...."</span><span class="o">);</span>

<span class="c1">// 注意！！：如果是myUserName和myPhone如何获取到缓存呢？</span>
<span class="c1">// 在相应的IdCache实现类中的getFieldPrefix()方法新增需要的前缀"my"</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getFieldPrefix</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">"my"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>如果想在代码中手动获取缓存，则只需直接调用<strong>IdCacheHelper.replaceAttributeValue()</strong>方法</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="nc">IdCacheHelper</span><span class="o">.</span><span class="na">replaceAttributeValue</span><span class="o">(</span><span class="nc">JsonUtil</span><span class="o">.</span><span class="na">toJSONStringWithNull</span><span class="o">(</span><span class="n">result</span><span class="o">)),</span> <span class="nc">PageResponse</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="3功能如何扩展">3、功能如何扩展</h3>

<p>1、添加缓存Model</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserIdCacheInfo</span> <span class="o">{</span>

    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">;</span>

    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户名"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"手机号"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>2、添加IdCache实现类</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserIdCache</span> <span class="kd">implements</span> <span class="nc">IdCache</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">UserDOMapper</span> <span class="n">userDOMapper</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getIdCacheType</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">IdPrefix</span><span class="o">.</span><span class="na">USER_ID</span><span class="o">.</span><span class="na">getIdPrefix</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">UserIdCacheInfo</span><span class="o">&gt;</span> <span class="nf">getAttributesByIds</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userDOMapper</span><span class="o">.</span><span class="na">listCacheInfoByIds</span><span class="o">(</span><span class="n">ids</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getIdFieldName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">getIdCacheModelClass</span><span class="o">().</span><span class="na">getDeclaredFields</span><span class="o">()[</span><span class="mi">0</span><span class="o">].</span><span class="na">getName</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Class</span> <span class="nf">getIdCacheModelClass</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">UserIdCacheInfo</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getFieldPrefix</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">"recommend"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">IdCacheCleaner</span><span class="o">&gt;</span> <span class="nf">getIdCacheCleaner</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">IdCacheCleaner</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="nc">Maps</span><span class="o">.</span><span class="na">newHashMap</span><span class="o">();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"POST-/jobSeeker/resume_build"</span><span class="o">,</span> <span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="nc">UserContext</span><span class="o">.</span><span class="na">getUserId</span><span class="o">()));</span>

        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="二身份验证">二、身份验证</h1>

<p>1、校验流程</p>

<p>注册生成校验JWT必要的tokenSalt盐；登录校验账户密码，生成token并把tokenSalt盐放入缓存；使用拦截器拦截请求，解析请求头中的token，处理得到user基本信息，并使用签名对token进行验证是否有效</p>

<p><strong>注册</strong>：在数据库生成用户基本信息的同时存入tokenSalt盐</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">secret</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
<span class="n">userDO</span><span class="o">.</span><span class="na">setTokenSalt</span><span class="o">(</span><span class="n">secret</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>登录</strong>：</p>

<p>​	1、通过用户名查询User信息</p>

<p>​	2、比对密码</p>

<p>​	3、取出tokenSalt盐，把盐和用户基本信息存入Redis缓存，并设定过期时间</p>

<p>​	4、处理是否允许重复登录</p>

<p>​		①、允许重复登录：不更改盐，重新生成一个新的有效token返回给前端</p>

<p>​		②、不允许重复登录：更改盐让原有的token失效，并把新的盐更新到数据库和缓存中，然后用新的盐去生成				新的token返回给前端</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">UserDO</span> <span class="n">userDO</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUserByTarget</span><span class="o">(</span><span class="n">passwordLoginReq</span><span class="o">.</span><span class="na">getUser</span><span class="o">());</span>
<span class="k">if</span> <span class="o">(!</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">userDO</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span>
                        <span class="nc">PasswordUtils</span><span class="o">.</span><span class="na">encodePassword</span><span class="o">(</span><span class="n">passwordLoginReq</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> 							<span class="n">userDO</span><span class="o">.</span><span class="na">getUserId</span><span class="o">())))</span> <span class="o">{</span>
    <span class="c1">// 密码错误</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">BizException</span><span class="o">(</span><span class="nc">UserErrorInfo</span><span class="o">.</span><span class="na">PASSWORD_ERROR</span><span class="o">);</span>
<span class="o">}</span>

<span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="no">REDIS_USER_PREFIX</span> <span class="o">+</span> <span class="n">userId</span><span class="o">;</span>
<span class="nc">RedisUtils</span><span class="o">.</span><span class="na">hPutAll</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">userDTO</span><span class="o">);</span>
<span class="nc">RedisUtils</span><span class="o">.</span><span class="na">expire</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">tokenExpire</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>

<span class="nc">String</span> <span class="n">token</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(!</span><span class="n">switchConfiguration</span><span class="o">.</span><span class="na">isEnableRepeatLogin</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">// 不允许重复登录, 登录之后其他token作废</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">updateTokenAndSalt</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">token</span> <span class="o">=</span> <span class="nc">JwtUtils</span><span class="o">.</span><span class="na">generateJwt</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span> <span class="n">getUserJwtExpire</span><span class="o">(</span><span class="n">userId</span><span class="o">),</span> <span class="n">tokenSalt</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>拦截器</strong>：</p>

<p>​	1、处理URL，对不要验证的URL进行放行</p>

<p>​	2、解析请求头token，把JWT中的有效负载payload提取出来</p>

<p>​	3、从payload的sub信息中获取userId</p>

<p>​	4、通过userId去Redis缓存中获取用户数据</p>

<p>​		①、如果存在，重置缓存过期时间</p>

<p>​		②、如果不存在，从数据库中查询，更新缓存用户数据</p>

<p>​	5、使用签名对token进行校验是否有效</p>

<p>​	6、如果验证的token在续期时间内，就对其进行续期</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">requestUrl</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span> <span class="o">||</span> <span class="n">requestUrl</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"swagger"</span><span class="o">)</span> <span class="o">||</span> <span class="n">requestUrl</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"/error"</span><span class="o">)</span> <span class="o">||</span> <span class="n">requestUrl</span>
            <span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"/csrf"</span><span class="o">)</span> <span class="o">||</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"OPTIONS"</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"不做权限校验的url: {} =&gt; {}"</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(),</span> <span class="n">requestUrl</span><span class="o">);</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 3. 资源类型不验证</span>
<span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="nc">ResourceHttpRequestHandler</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// todo: 一般是请求的接口不存在时到这里, 到这里时不是标准格式返回, 需不需改变</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 4. 不用检查权限的api 直接通过</span>
<span class="kt">boolean</span> <span class="n">isFreeLogin</span> <span class="o">=</span> <span class="o">((</span><span class="nc">HandlerMethod</span><span class="o">)</span><span class="n">handler</span><span class="o">).</span><span class="na">hasMethodAnnotation</span><span class="o">(</span><span class="nc">FreeLogin</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="k">if</span> <span class="o">(</span><span class="n">isFreeLogin</span> <span class="o">&amp;&amp;</span> <span class="o">!((</span><span class="nc">HandlerMethod</span><span class="o">)</span><span class="n">handler</span><span class="o">).</span><span class="na">getMethodAnnotation</span><span class="o">(</span><span class="nc">FreeLogin</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">value</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">// 不用获取用户信息的免登录接口</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

:ET